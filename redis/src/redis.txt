

1. redis的常用数据结构
  String(字符串),list(链表),Set(无序集合),sorted set(有序集合),hash(Hash 表)

2. redis版本（2.8）

3. 命令

3.1 基础命令
databases 16 默认有16个数据库[0-15]
select 1 选择1号数据库

flushdb 清除当前database的所有数据
flushall 清除所有database的所有数据

dbsize  当前database的数量
save    对redis进行持久化
quit    退出命令

3.2 键命令
nx 结尾的命令，会加判断

ttl [key]       查看key的过期时间，单位秒，
expire [key] [time,秒]  设置key值的过期时间
type [key]      判断key的数据类型
randomkey   随机获取一个key

#命令结合
setex [key] [time,秒] [value]
psetex [key] [time,毫秒] [value]

getset [key] [value]  设置新的值，同时返回已覆盖的value


4. 数据结构说明
    4.1 string 结构
        set [key] [value]
        get [key]
        getrange [key] [first] [end]  获取value的指定字符串
        strlen [key]  获取字符串的长度
        incr [key]  使值+1
        incrby [key] [num] 使值+num
        decr [key]  使值-1
        decr [key] [num] 使值-num
        append [key] [string] 追加一个字符串
        rename [oldKey] [newKey]  重命令key，直接覆盖已存在的！可以使用renamenx加判断
        exists [key]    判断key是否存在
        mset [key] [value] ... 设置多个值  +nx 有事务的性质
        mget [key] ...  获取多个值

    4.2 hash结构  类似于HashMap
        hset [key] [value]
        hget [key] [obj.key]
        hexists [key] [obj.key]
        hgetall [key]
        hkeys [key]
        hvals [key]
        hlen  [key]
        hdel  [key] [obj.key..]

    4.3 list结构 允许重复值 类似于链表
        lpush [key] [key...]   放在list的头部
        rpush [key] [key...]   放在list的尾部
        lpop  [key]   移除头部元素
        rpop  [key]   移除尾部元素
        lset  [key] [index] [value]  根据下标设置值
        llen  [key]
        lrange [first] [end]
        lindex [key] [index]  根据下标获取值

    4.4 set结构  无序集合 没有重复值
        sadd [key] [key...]
        scard [key]
        srem    [key] [list.value..]  移除数量
        smembers [key] 查看所有元素
        sdiff [key1] [key2]  差值 key1 - key2
        sinter [key1] [key2]  求交集
        sunion [key1] [key2] 求并集
        srandmember  [key] 2  返回key的 随机两个数据
        sismember [key] [list.value] 判断是否为成员变量

        spop   [key]  移除一个随机元素，同时返回回来

    4.5 sorted set 有序集合（相当于LinkedHashSet）（一般以z开头）
        zadd [key] [obj:(range value range value)] 设置一个sortedSet的值 range为分数值
        zcard [key] 查看有多少个元素

        zrem [key] [obj.key...]  移除元素


        zcount [key] [0] [5]  获取分数值在0-5的成员数量
        zscore  [key] [obj.key] 返回该元素的分数值
        zrank  [key] [obj.key] 返回某个集合的索引（注意是索引不是分数值）
        zincrby [key] [num] [obj.key] 值+num

        zrange  [key] [first] [end] 根据排序拿元素，返回所有key
        zrange  [key] [first] [end] withscores  根据排序拿元素，返回所有对象

5. redis分布式
    5.1 分布式算法原理
        consistent hash 一致性hash算法
            1. 先对数据hash 取值  key     这是固定的
            2. 再对缓存hash 取值  cache   这是不固定的
            3. 把hash的取模成环形
            4. key可以直接存在顺时针最近的cache。这样每次取消or新增节点，影响的范围比较小（前提是hash分布均匀）

            q: 由于hash的倾斜性，也就是hash分布不均匀
                引入虚拟节点，对每个cache放大，随着虚拟节点的设置增多。会分布均匀








